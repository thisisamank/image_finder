{"version":3,"sources":["Components/navbar/NavBar.js","Components/image-results/ImageResults.jsx","Components/search/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","AppBar_default","title","ImageResults","state","open","currentImg","handleOpen","img","_this","setState","handleClose","imageListContent","_this2","this","actions","FlatButton_default","label","primary","onClick","images","props","console","log","GridList","cols","map","key","uuid","v1","tags","subtitle","user","actionIcon","IconButton_default","largeImageURL","zoom_in_default","color","src","alt","Dialog_default","modal","onRequestClose","style","width","Component","Search","searchText","amount","apiUrl","apiKey","onTextChange","e","value","target","Object","defineProperty","name","axios","get","getParameter","then","res","data","hits","catch","err","concat","onAmountChange","index","TextField_default","onChange","floatingLabelText","fullWidth","SelectField_default","MenuItem_default","primaryText","length","image_results_ImageResults","App","MuiThemeProvider_default","navbar_NavBar","search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1cda3859.chunk.js","sourcesContent":["import AppBar from \"material-ui/AppBar\";\r\nimport React from \"react\";\r\n\r\nconst NavBar = () => {\r\n  return <AppBar title=\"Pixabay image-search\" />;\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { GridList, GridTile } from \"material-ui/GridList\";\r\nimport IconButton from \"material-ui/IconButton\";\r\nimport ZoomIn from \"material-ui/svg-icons/action/zoom-in\";\r\nimport Dialog from \"material-ui/Dialog\";\r\nimport FlatButton from \"material-ui/FlatButton\";\r\nimport uuid from \"uuid\";\r\n\r\nclass ImageResults extends Component {\r\n  state = {\r\n    open: false,\r\n    currentImg: \"\"\r\n  };\r\n\r\n  handleOpen = img => {\r\n    this.setState({ open: true, currentImg: img });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  render() {\r\n    const actions = [\r\n      <FlatButton label=\"Close\" primary={true} onClick={this.handleClose} />\r\n    ];\r\n    let imageListContent;\r\n    const { images } = this.props;\r\n    console.log(images);\r\n    if (images) {\r\n      imageListContent = (\r\n        <GridList cols={3}>\r\n          {images.map(img => (\r\n            <GridTile\r\n              key={uuid.v1()}\r\n              title={img.tags}\r\n              subtitle={\r\n                <span>\r\n                  by <strong>{img.user}</strong>\r\n                </span>\r\n              }\r\n              actionIcon={\r\n                <IconButton onClick={() => this.handleOpen(img.largeImageURL)}>\r\n                  <ZoomIn color=\"white\" />\r\n                </IconButton>\r\n              }\r\n            >\r\n              <img src={img.largeImageURL} alt=\"\" />\r\n            </GridTile>\r\n          ))}\r\n        </GridList>\r\n      );\r\n    } else {\r\n      imageListContent = null;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {imageListContent}\r\n        <Dialog\r\n          actions={actions}\r\n          modal={false}\r\n          open={this.state.open}\r\n          onRequestClose={this.handleClose}\r\n        >\r\n          <img src={this.state.currentImg} alt=\"\" style={{ width: \"100%\" }} />\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nImageResults.propTypes = {\r\n  images: PropTypes.array.isRequired\r\n};\r\n\r\nexport default ImageResults;\r\n","import React, { Component } from \"react\";\r\nimport TextField from \"material-ui/TextField\";\r\nimport SelectField from \"material-ui/SelectField\";\r\nimport MenuItem from \"material-ui/MenuItem\";\r\nimport axios from \"axios\";\r\nimport ImageResults from \"../image-results/ImageResults\";\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    searchText: \"\",\r\n    amount: 15,\r\n    apiUrl: \"https://pixabay.com/api\",\r\n    apiKey: \"12741596-855720dd4f57e16a9ba35201f\",\r\n    images: []\r\n  };\r\n  onTextChange = e => {\r\n    let value = e.target.value;\r\n    this.setState({ [e.target.name]: value });\r\n    if (value === \"\") {\r\n      this.setState({ images: [] });\r\n      console.log(\"cleared\");\r\n    } else {\r\n      axios\r\n        .get(this.getParameter())\r\n        .then(res => this.setState({ images: res.data.hits }))\r\n        .catch(err => console.log(err));\r\n    }\r\n  };\r\n\r\n  getParameter = () => {\r\n    return `${this.state.apiUrl}/?key=${this.state.apiKey}&q=${\r\n      this.state.searchText\r\n    }&image_type=photo&per_page=${this.state.amount}&safesearch=true`;\r\n  };\r\n\r\n  onAmountChange = (e, index, value) => this.setState({ amount: value });\r\n  render() {\r\n    console.log(this.state.images);\r\n    return (\r\n      <div>\r\n        <TextField\r\n          name=\"searchText\"\r\n          value={this.state.searchText}\r\n          onChange={this.onTextChange}\r\n          floatingLabelText=\"Search For images\"\r\n          fullWidth={true}\r\n        />\r\n        <br />\r\n        <SelectField\r\n          value={this.state.amount}\r\n          name=\"amount\"\r\n          floatingLabelText=\"Frequency\"\r\n          onChange={this.onAmountChange}\r\n        >\r\n          <MenuItem key={1} value={5} primaryText=\"5\" />\r\n          <MenuItem key={2} value={10} primaryText=\"10\" />\r\n          <MenuItem key={3} value={15} primaryText=\"15\" />\r\n          <MenuItem key={4} value={30} primaryText=\"30\" />\r\n          <MenuItem key={5} value={50} primaryText=\"50\" />\r\n        </SelectField>\r\n        <br />\r\n        {this.state.images.length > 0 ? (\r\n          <ImageResults images={this.state.images} />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Search;\r\n","import React from \"react\";\nimport MuiThemeProvider from \"material-ui/styles/MuiThemeProvider\";\nimport NavBar from \"./Components/navbar/NavBar\";\nimport Search from \"./Components/search/Search\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <MuiThemeProvider>\n      <div>\n        <NavBar />\n        <Search />\n      </div>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}